syntax = "proto3";

package cheropatillapb;

import "google/protobuf/timestamp.proto";

// BasicContentData is the core data fields related to content (i.e: thread,
// comment or subcomment)
message BasicContentData {
	google.protobuf.Timestamp publish_date = 1;
	string title = 2;
	string content = 3;
	string ft_file = 4;
	string author_id = 5;
}

// FullContentData holds the entire data structure for contents,
// including metadata about the content such as how many (and what) 
// users have topvoted it.
// This is the format the data will be stored in.
message FullContentData {
	BasicContentData basic_content_data = 1;
	// permalink is the URL of this content
	string permalink = 2;
	// topvotes is the total number of positive votes this content has received.
	uint32 topvotes = 3;
	// voter_ids holds the ids of the users that topvoted this content.
	repeated string voter_ids = 4;
	// threads and 1st level comments can have replies, but subcomments can't
	oneof extra_data {
		ThreadExtraData thread_related = 5;
		SubcommentExtraData subcomment_related = 6;
	}
	message ThreadExtraData {
		uint32 replies = 1;
		repeated string replier_ids = 2;
	}
	message SubcommentExtraData {}
	google.protobuf.Timestamp updated = 7;
	string section = 8;
	string id = 9;
}

// ContentInfo holds information about the content (i.e. metadata). The purpose of it 
// is evaluating the	relevance of contents.
message ContentInfo {
	// interactions is the total number of topvotes + comments that the content has
	// accummulated.
	//
	// For threads, it is the sum of the thread upvotes, first level comment upvotes,
	// subcomment upvotes, comments and subcomments.
	//
	// For first level comments, it is the sum of the comment upvotes, subcomment upvotes
	// and subcomments.
	//
	// For subcomments, it is the sum of subcomment upvotes.
	uint32 interactions = 1;
	// last_updated marks the timestamp indicating when the last interaction on this content 
	// happened.
	google.protobuf.Timestamp last_updated = 2;
	// avg_update_time is the average time interval between interactions. It is calculated
	// by dividing (if previously set) avg_update_time between interactions, and it is 
	// set every time an interaction happens.
	uint64 avg_update_time = 3;
	// content_data_key holds the id of the content which this metadata refers to.
	string content_data_key = 4;
}

// ThreadInfo holds information of a thread to be searched more easily across the
// different sections available.
message ThreadInfo {
	string id = 1;
	string section = 2;
}


// BasicUserData holds basic information about an user. This information 
// is intended for succinct data interchange between gRPC server and client 
// on the user registration event.
message BasicUserData {
	string email = 1;
	string name = 2;
	string pic_url = 3;
	string id = 4;
	string username = 5;
	string alias = 6;
	string about = 7;
}

// FullUserData holds all the information of users. This is the format users will 
// be stored in.
message FullUserData {
	BasicUserData basic_user_data = 1;
	// ids of threads that this user created.
	repeated ThreadInfo threads_created = 2;
	// ids of threads that this user saved to read later.
	repeated ThreadInfo threads_saved = 3;
	// the last time this user created a thread.
	google.protobuf.Timestamp last_time_created = 4;
	// ids of users that are following this user.
	repeated string followers_ids = 5;
	// ids of users that this user is following.
	repeated string following_ids = 6;
	// unread notifications of this user.
	repeated Notif unread_notifs = 7;
	// read notifications of this user.
	repeated Notif read_notifs = 8;
}


// Notif is the format in which users get their notifications.
message Notif {
	google.protobuf.Timestamp timestamp = 1;
	// example message: "User1234 and 2 more have commented out your thread"
	string message = 2;
	// example subject: "On your thread: Improving your skills at writing..."
	string subject = 3;
	// example id: {section}#{content_id}#{subject}
	string id = 4;
	NotifDetails details = 5;
	message NotifDetails {
		NotifType type = 1;
		string last_user_id_involved = 2;
	}
	enum NotifType {
		UNKNOWN = 0;
		TOPVOTE = 1;
		TOPVOTE_COMMENT = 2;
		TOPVOTE_SUBCOMMENT = 3;
		COMMENT = 4;
		SUBCOMMENT = 5;
		MENTION = 6;
		UPDATE_THREAD = 7;
		UPDATE_COMMENT = 8;
		UPDATE_SUBCOMMENT = 9;
	}
}

// NotifyUser maps notifications to users.
message NotifyUser {
	string user_id = 1; // receiver
	Notif notification = 2; // actual message
}


// ContentStatus defines the different categories that fits content at a particular
// time ,trying to describe the quality of the content.
enum ContentStatus {
	NEW = 0;
	RELEVANT = 1;
	TOP = 2;
}


// ContentRuleResponse holds a piece of content and its current status.
message ContentRuleResponse {
	ContentStatus status = 1;
	FullContentData data = 2;
}

// ContentRuleRequest holds the content status for the content it is expecting to get.
message ContentRuleRequest {
	ContentStatus status = 1;
}

// ContentPattern holds an array of ContentRuleRequest (i.e. content status),
// composing up a pattern of content that's expected to get back.
message ContentPattern {
	repeated ContentRuleRequest pattern = 1;
	// discard_ids is an array of content ids that must not be returned back, since it's
	// content the user has already seen.
	repeated string discard_ids = 2;
	// content_context represents the place in which the content must be retrieved from.
	oneof content_context {
		Context.Section section_ctx = 3;
		Context.Thread thread_ctx = 4;
		Context.Feed feed_ctx = 5;
	}
}


// GeneralPattern holds an array of ContentRuleRequest (i.e. content status), composing 
// up a pattern of content that's expected to get back. It is intended for recycling 
// content from every section.
message GeneralPattern {
	repeated ContentRuleRequest pattern = 1;
	// discard_ids is a map of section names mapped to content ids that must not be 
	// returned back, since it's content the user has already seen.
	map<string, Ids> discard_ids = 2;
	message Ids {
		repeated string ids = 1;
	}
}


// The Context holds information about the place at which an event occurs or where 
// content should be retrieved from.
message Context {
	// A Section is the highest level and just has the name of the section.
	message Section {
		string section_name = 1;
	}
	// A Thread is inside of a section and has a thread identifier unique to that section.
	message Thread {
		Section section_ctx = 1;
		string thread_id = 2;
	}
	// A Comment is inside of a thread and has a comment identifier unique to that thread.
	message Comment {
		Thread thread_ctx = 1;
		string comment_id = 2;
	}
	// A Subcomment is inside of a comment and has a subcomment identifier unique to that 
	// comment.
	message Subcomment {
		Comment comment_ctx = 1;
		string subcomment_id = 2;
	}
	// Feed is a special case intended for filling a feed with content whose authors are
	// the users of the given user identifiers.
	message Feed {
		repeated string user_ids = 1;
	}
}

// UpvoteRequest holds information about the upvote event.
message UpvoteRequest {
	string user_id = 1; // Who is submitting the upvote
	// The upvote event occurs either in a thread, in a comment or in a subcomment.
	oneof content_context {
		Context.Thread thread_ctx = 2;
		Context.Comment comment_ctx = 3;
		Context.Subcomment subcomment_ctx = 4;
	}
}

// CommentRequest holds information about the comment event.
message CommentRequest {
	// A comment has the same basic structure as regular content.
	BasicContentData data = 1;
	// The comment event occurs either in a thread or in a comment.
	oneof content_context {
		Context.Thread thread_ctx = 2;
		Context.Comment comment_ctx = 3;
	}
}

// UpdateContentRequest holds information about the comment event.
message UpdateContentRequest {
	// data holds the actual content updated, along with the user id of who's submitting the
	// updated content. This user id must match the user id of the author of the content.
	BasicContentData data = 1;
	// The update content event occurs either in a thread, in a comment or in a subcomment.
	oneof content_context {
		Context.Thread thread_ctx = 2;
		Context.Comment comment_ctx = 3;
		Context.Subcomment subcomment_ctx = 4;
	}
}

// DeleteContentRequest holds information about the delete content event.
message DeleteContentRequest {
	string user_id = 1; // Who is updating the content
	// The delete content event occurs either in a thread, in a comment or in a subcomment.
	oneof content_context {
		Context.Thread thread_ctx = 2;
		Context.Comment comment_ctx = 3;
		Context.Subcomment subcomment_ctx = 4;
	}
}

message DeleteContentResponse {}

// CreateThreadRequest holds the content itself and the section at which the content
// is being created.
message CreateThreadRequest {
	BasicContentData data = 1;
	Context.Section section_ctx = 2;
}

// CreateThreadResponse holds the relative URL of the thread just created
message CreateThreadResponse {
	string permalink = 1;
}

// GetFullUserDataRequest holds the id of the user to get its full data
message GetFullUserDataRequest {
	string user_id = 1;
}

// GetFullUserDataResponse holds the full user data for the user requested
message GetFullUserDataResponse {
	FullUserData full_user_data = 1;
}

// GetBasicUserDataRequest holds the id of the user to get its basic data
message GetBasicUserDataRequest {
	string user_id = 1;
}

// GetBasicUserDataResponse holds the basic data for the user requested
message GetBasicUserDataResponse {
	BasicUserData basic_user_data = 1;
}

// UpdateBasicUserDataRequest holds public data of a user that could be updated.
message UpdateBasicUserDataRequest {
	string user_id = 1;
	string username = 2;
	string description = 3;
	string pic_url = 4;
	string alias = 5;
}

message UpdateBasicUserDataResponse {}

// GetThreadsRequest holds a list of thread ids and the section they belong to
message GetThreadsRequest {
	repeated ThreadInfo threads = 1;
}

// GetThreadsResponse holds a list of full content data of threads requested
message GetThreadsResponse {
	repeated ThreadData threads = 1;
}

// ThreadData holds the thread data and the basic data about the author
message ThreadData {
	FullContentData Thread = 1;
	BasicUserData author_data = 2;
}

// GetThreadRequest holds a single thread id and the section name it belongs to
message GetThreadRequest {
	ThreadInfo thread = 1;
}

// GetThreadResponse holds the full content data of a single thread and basic data 
// about the author of the thread.
message GetThreadResponse {
	FullContentData thread = 1;
	BasicUserData author_data = 2;
}

// GetBasicUsersInfoRequest holds the ids of the users to get their basic info
message GetBasicUsersInfoRequest {
	repeated string ids = 1;
}

// GetBasicUsersInfoResponse holds the basic info of the users requested
message GetBasicUsersInfoResponse {
	repeated BasicUserData users_data = 1;
}

// GetSubcommentsRequest is the message for requesting a comment's subcomments.
message GetSubcommentsRequest {
	// comment_ctx indicates what comment is being requested
	Context.Comment comment_ctx = 1;
	// offset indicates the number of comments to be ignored, since subcomments 
	// are stored and returned sequentially in cronological order
	uint32 offset = 2;
}

// Subcomment holds full content data of a single subcomment
message Subcomment {
	FullContentData data = 1;
}

// ReadNotifsRequest holds the id of the user whose unread notifications will be 
// marked as read
message ReadNotifsRequest {
	string user_id = 1;
}

message ReadNotifsResponse {}

// ClearNotifsRequest holds the id of the user whose both unread and read 
// notifications will be deleted
message ClearNotifsRequest {
	string user_id = 1;
}

message ClearNotifsResponse {}

// FollowUserRequest holds the id of the user which is following and the username
// of the user being followed
message FollowUserRequest {
	string user_id = 1;
	// user_to_follow indicates the username
	string user_to_follow = 2;
}

message FollowUserResponse {}

// UnfollowUserRequest holds the id of the user which is unfollowing and the username
// of the user losing a follower
message UnfollowUserRequest {
	string user_id = 1;
	string user_to_unfollow = 2;
}

message UnfollowUserResponse {}

// ViewUsersRequest is a message for requesting either following or followers users 
// data of a given user
message ViewUsersRequest {
	string user_id = 1;
	// context is either following or followers
	string context = 2;
	// offset indicates how many users to ignore for pagination
	uint32 offset = 3;
}

// ViewUsersResponse holds a list of basic user data of requested users following
// or followers of a user
message ViewUsersResponse {
	repeated BasicUserData basic_user_data = 1;
}

// ViewUserByUsernameRequest is a message for requesting public data of a user
message ViewUserByUsernameRequest {
	string username = 1;
}

// ViewUserResponse holds some basic data of a requested user
message ViewUserResponse {
	string alias = 1;
	string username = 2;
	string pic_url = 3;
	string about = 4;
	repeated ThreadInfo threads_created = 5;
	google.protobuf.Timestamp last_time_created = 6;
	repeated string followers_ids = 7;
	repeated string following_ids = 8;
}

// LoginRequest is a message for requesting the validation of a user's credentials
message LoginRequest {
	string username = 1;
	string password = 2;
}

// LoginResponse holds the id of the user that just logged in
message LoginResponse {
	string user_id = 1;
}

// RegisterUserResponse holds the id of the user that just signed in
message RegisterUserResponse {
	string user_id = 1;
}

service CrudCheropatilla {
	// Get new feed of threads in a section or comments in a thread
	rpc RecycleContent(ContentPattern) returns (stream ContentRuleResponse) {}
	// Get new feed of threads in general (from multiple sections)
	rpc RecycleGeneral(GeneralPattern) returns (stream ContentRuleResponse) {}
	// Post upvote on thread, comment or subcomment
	rpc Upvote(UpvoteRequest) returns (stream NotifyUser) {}
	// Post comment on a thread or in a comment
	rpc Comment(CommentRequest) returns (stream NotifyUser) {}
	// Update a thread, comment or subcomment
	rpc UpdateContent(UpdateContentRequest) returns (stream NotifyUser) {}
	// Delete a thread, comment or subcomment
	rpc DeleteContent(DeleteContentRequest) returns (DeleteContentResponse) {}
	// Post a thread to create
	rpc CreateThread(CreateThreadRequest) returns (CreateThreadResponse) {}
	// Get a user's full data
	rpc GetFullUserData(GetFullUserDataRequest) returns (GetFullUserDataResponse) {}
	// Get a user's basic data
	rpc GetBasicUserData(GetBasicUserDataRequest) returns (GetBasicUserDataResponse) {}
	// Update a user's basic data
	rpc UpdateBasicUserData(UpdateBasicUserDataRequest) returns (UpdateBasicUserDataResponse) {}
	// Get array of threads
	rpc GetThreads(GetThreadsRequest) returns (GetThreadsResponse) {}
	// Get single thread
	rpc GetThread(GetThreadRequest) returns (GetThreadResponse) {}
	// Get a comment's comments
	rpc GetSubcomments(GetSubcommentsRequest) returns (stream Subcomment) {}
	// Get users' basic data
	rpc GetBasicUsersInfo(GetBasicUsersInfoRequest) returns (GetBasicUsersInfoResponse) {}
	// Mark unread notifications as read
	rpc MarkAllAsRead(ReadNotifsRequest) returns (ReadNotifsResponse) {}
	// Clear all the notifications
	rpc ClearNotifs(ClearNotifsRequest) returns (ClearNotifsResponse) {}
	// Follow a user
	rpc FollowUser(FollowUserRequest) returns (FollowUserResponse) {}
	// Unfollow a user
	rpc UnfollowUser(UnfollowUserRequest) returns (UnfollowUserResponse) {}
	// Get either following or followers users' basic data
	rpc ViewUsers(ViewUsersRequest) returns (ViewUsersResponse) {}
	// Get username basic data, following, followers and threads created
	rpc ViewUserByUsername(ViewUserByUsernameRequest) returns (ViewUserResponse) {}
	// Validate user credentials to login
	rpc Login(LoginRequest) returns (LoginResponse) {}
	// Register new user
	rpc RegisterUser(BasicUserData) returns (RegisterUserResponse) {}
}