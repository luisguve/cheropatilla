syntax = "proto3";

// Package cheropatillapb defines the interface to send and receive messages to
// and from the server.
package cheropatillapb;

import "google/protobuf/timestamp.proto";

message Content {
	string title = 1;
	string content = 2;
	string ft_file = 3;
	google.protobuf.Timestamp publish_date = 4;
}

message ContentAuthor {
	string id = 1;
	string username = 2;
	string alias = 3;
}

message ContentMetadata {
	// id contains the THREAD ID
	string id = 1;
	// section is the name of the section
	string section = 2;
	// permalink is the full url to the content, including any fragment
	string permalink = 3;
	uint32 topvotes = 4;
	uint32 replies = 5;
	repeated string voter_ids = 6;
	repeated string replier_ids = 7;
	// list of users who saved this content
	repeated string users_who_saved = 8;
}

message RecycleResponse {
	ContentAuthor author = 1;
	Content content = 2;
	ContentMetadata metadata = 3;
}

// UserHeaderData holds information to be displayed in the header navigation section
// of every page.
message UserHeaderData {
	string alias = 1;
	string username = 2;
	// unread notifications of this user.
	repeated Notif unread_notifs = 3;
	// read notifications of this user.
	repeated Notif read_notifs = 4;
	// last time this user created a thread
	google.protobuf.Timestamp last_time_created = 5;
}

// Basic data of users
message BasicUserData {
	string alias = 1;
	string username = 2;
	string pic_url = 3;
	string about = 4;
}

// FullUserData holds all the information of users. This is the format users will 
// be stored in.
message FullUserData {
	BasicUserData basic_user_data = 1;
	// the last time this user created a thread.
	google.protobuf.Timestamp last_time_created = 2;
	// ids of users that are following this user.
	repeated string followers_ids = 3;
	// ids of users that this user is following.
	repeated string following_ids = 4;
	// unread notifications of this user.
	repeated Notif unread_notifs = 5;
	// read notifications of this user.
	repeated Notif read_notifs = 6;
	// ids of content this user has created recently.
	Activity recent_activity = 7;
	// ids of unactive content this user has created.
	Activity old_activity = 8;
	// ids of threads that this user has saved to read later.
	repeated Context.Thread threads_saved = 9;
}

// Activity holds the threads created, comments and subcomments of a given user
message Activity {
	repeated Context.Thread threads_created = 1;
	repeated Context.Comment comments = 2;
	repeated Context.Subcomment subcomments = 3;
}

// Notif is the format in which users get their notifications.
message Notif {
	google.protobuf.Timestamp timestamp = 1;
	// example message: "User1234 and 2 more have commented out your thread"
	string message = 2;
	// example subject: "On your thread: Improving your skills at writing..."
	string subject = 3;
	// example id: {section}#{content_id}#{subject}
	string id = 4;
	// url to content related to the notification
	string permalink = 5;
	// internal details on the notification
	NotifDetails details = 6;
	message NotifDetails {
		NotifType type = 1;
		string last_user_id_involved = 2;
	}
	enum NotifType {
		UNKNOWN = 0;
		TOPVOTE = 1;
		TOPVOTE_COMMENT = 2;
		TOPVOTE_SUBCOMMENT = 3;
		COMMENT = 4;
		SUBCOMMENT = 5;
		MENTION = 6;
		UPDATE_THREAD = 7;
		UPDATE_COMMENT = 8;
		UPDATE_SUBCOMMENT = 9;
	}
}

// NotifyUser maps notifications to users.
message NotifyUser {
	string user_id = 1; // receiver
	Notif notification = 2; // actual message
}

// ContentStatus defines the different categories that fits content at a particular
// time, trying to describe the quality of the content.
enum ContentStatus {
	NEW = 0;
	REL = 1;
	TOP = 2;
}

// ContentPattern holds an array of ContentStatus, composing up a pattern of content 
// that's expected to get back. It is intended for recycling content of a specific
// type: either threads in a section, or comments in a thread.
message ContentPattern {
	repeated ContentStatus pattern = 1;
	// discard_ids is an array of content ids that must not be returned back, since it's
	// content the user has already seen.
	repeated string discard_ids = 2;
	// content_context represents the place in which the content must be retrieved from.
	oneof content_context {
		// get content from a section
		Context.Section section_ctx = 3;
		// get content (comments) from a thread
		Context.Thread thread_ctx = 4;
		// get content saved by the given user
		string user_id = 5;
	}
}

// GeneralPattern holds an array of ContentStatus, composing up a pattern of content 
// that's expected to get back. It is intended for recycling content from every section.
message GeneralPattern {
	repeated ContentStatus pattern = 1;
	// discard_ids is a map of section names mapped to content ids that must not be 
	// returned back, since it's content the user has already seen.
	map<string, IdList> discard_ids = 2;
}

// SavedPattern holds an array of ContentStatus, composing up a pattern of content 
// that's expected to get back. It is intended for recycling content in the context
// of a user viewing his saved threads.
message SavedPattern {
	repeated ContentStatus pattern = 1;
	// discard_ids is a map of section names mapped to content ids that must not be 
	// returned back, since it's content the user has already seen.
	map<string, IdList> discard_ids = 2;
	// the user
	string user_id = 3;
}

// IdList holds a list of ids of content
message IdList {
	repeated string ids = 1;
}

// ActivityPattern holds an array of ContentStatus, composing up a pattern of content 
// that's expected to get back. It is intended for recycling activity from a specific 
// user or a list of users.
message ActivityPattern {
	repeated ContentStatus pattern = 1;
	// discard_ids is a map of user_ids to activity from the user referred to by 
	// the key that must not be returned back, since it's content the user has 
	// already seen.
	map<string, Activity> discard_ids = 2;
	// context is either users following or the user itself.
	oneof context {
		UserList users = 3;
		string user_id = 4;
	}
}

// UserList holds a list of user ids
message UserList {
	repeated string ids = 1;
}

// ContentRule holds a piece of content and its current status.
message ContentRule {
	RecycleResponse data = 1;
	ContentStatus status = 2;
	oneof content_context {
		Context.Thread thread_ctx = 3;
		Context.Comment comment_ctx = 4;
		Context.Subcomment subcomment_ctx = 5;
	}
}

// The Context holds information about the place at which an event occurs or where 
// content should be retrieved from.
message Context {
	// A Section is the highest level and just has the name of the section.
	message Section {
		string name = 1;
	}
	// A Thread is inside of a section and has a thread identifier unique to that section.
	message Thread {
		Section section_ctx = 1;
		string id = 2;
	}
	// A Comment is inside of a thread and has a comment identifier unique to that thread.
	message Comment {
		Thread thread_ctx = 1;
		string id = 2;
	}
	// A Subcomment is inside of a comment and has a subcomment identifier unique to that 
	// comment.
	message Subcomment {
		Comment comment_ctx = 1;
		string id = 2;
	}
}

// UpvoteRequest holds information about the upvote event.
message UpvoteRequest {
	string user_id = 1; // Who is submitting the upvote
	// The upvote event occurs either in a thread, in a comment or in a subcomment.
	oneof content_context {
		Context.Thread thread_ctx = 2;
		Context.Comment comment_ctx = 3;
		Context.Subcomment subcomment_ctx = 4;
	}
}

// CommentRequest holds information about the comment event.
message CommentRequest {
	// A comment has the same basic structure as regular content but doesn't have a title.
	string content = 1;
	string pic_url = 2;
	google.protobuf.Timestamp publish_date = 3;
	// The comment event occurs either in a thread or in a comment.
	oneof content_context {
		Context.Thread thread_ctx = 4;
		Context.Comment comment_ctx = 5;
	}
}

// UpdateContentRequest holds information about the comment event.
message UpdateContentRequest {
	// data holds the actual content updated.
	Content data = 1;
	// The user id of who's submitting the updated content must match the user id of 
	// the original author of the content.
	string user_id = 2;
	// The update content event occurs either in a thread, in a comment or in a subcomment.
	oneof content_context {
		Context.Thread thread_ctx = 3;
		Context.Comment comment_ctx = 4;
		Context.Subcomment subcomment_ctx = 5;
	}
}

// DeleteContentRequest holds information about the delete content event.
message DeleteContentRequest {
	string user_id = 1; // Who is deleting the content
	// The delete content event occurs either in a thread, in a comment or in a subcomment.
	oneof content_context {
		Context.Thread thread_ctx = 2;
		Context.Comment comment_ctx = 3;
		Context.Subcomment subcomment_ctx = 4;
	}
}

message DeleteContentResponse {}

// CreateThreadRequest holds the content itself and the section at which the content
// is being created.
message CreateThreadRequest {
	Content data = 1;
	Context.Section section_ctx = 2;
}

// CreateThreadResponse holds the relative URL of the thread just created
message CreateThreadResponse {
	string permalink = 1;
}

// GetBasicUserDataRequest holds the id of the user to get its basic data
message GetBasicUserDataRequest {
	string user_id = 1;
}

// UpdateBasicUserDataRequest holds public data of a user that could be updated.
message UpdateBasicUserDataRequest {
	string user_id = 1;
	string username = 2;
	string description = 3;
	string pic_url = 4;
	string alias = 5;
}

message UpdateBasicUserDataResponse {}

// GetThreadRequest holds a single thread id and the section name it belongs to
message GetThreadRequest {
	Context.Thread thread = 1;
}

// GetThreadResponse holds the full content data of a single thread and basic data 
// about the author of the thread.
message GetThreadResponse {
	ContentAuthor author = 1;
	Content content = 2;
	ContentMetadata metadata = 3;
}

// GetSubcommentsRequest is the message for requesting a comment's subcomments.
message GetSubcommentsRequest {
	// comment_ctx indicates what comment is being requested
	Context.Comment comment_ctx = 1;
	// offset indicates the number of comments to be ignored, since subcomments 
	// are stored and returned sequentially in cronological order
	uint32 offset = 2;
}

// Subcomment holds full content data of a single subcomment
message Subcomment {
	ContentAuthor author = 1;
	Content content = 2;
	ContentMetadata metadata = 3;
}

// ReadNotifsRequest holds the id of the user whose unread notifications will be 
// marked as read
message ReadNotifsRequest {
	string user_id = 1;
}

message ReadNotifsResponse {}

// ClearNotifsRequest holds the id of the user whose both unread and read 
// notifications will be deleted
message ClearNotifsRequest {
	string user_id = 1;
}

message ClearNotifsResponse {}

// FollowUserRequest holds the id of the user which is following and the username
// of the user being followed
message FollowUserRequest {
	string user_id = 1;
	// user_to_follow indicates the username
	string user_to_follow = 2;
}

message FollowUserResponse {}

// UnfollowUserRequest holds the id of the user which is unfollowing and the username
// of the user losing a follower
message UnfollowUserRequest {
	string user_id = 1;
	string user_to_unfollow = 2;
}

message UnfollowUserResponse {}

// SaveThreadRequest holds the id of the user which is saving the thread and the 
// information about the thread to be saved.
message SaveThreadRequest {
	string user_id = 1;
	Context.Thread thread = 2;
}

message SaveThreadResponse {}

// UnsaveThreadRequest holds the id of the user which is unsaving the thread and the 
// information about the thread to be removed from the user's saved thread list.
message UnsaveThreadRequest {
	string user_id = 1;
	Context.Thread thread = 2;
}

message UnsaveThreadResponse {}

// ViewUsersRequest is a message for requesting either following or followers users 
// data of a given user
message ViewUsersRequest {
	string user_id = 1;
	// context is either following or followers
	string context = 2;
	// offset indicates how many users to ignore for pagination
	uint32 offset = 3;
}

// ViewUsersResponse holds a list of basic user data of requested users following
// or followers of a user
message ViewUsersResponse {
	repeated BasicUserData basic_user_data = 1;
}

// ViewUserByUsernameRequest is a message for requesting public data of a user
message ViewUserByUsernameRequest {
	string username = 1;
}

// ViewUserResponse holds some basic data of a requested user
message ViewUserResponse {
	string alias = 1;
	string username = 2;
	string pic_url = 3;
	string about = 4;
	string user_id = 5;
	google.protobuf.Timestamp last_time_created = 6;
	repeated string followers_ids = 7;
	repeated string following_ids = 8;
}

// GetDashboardDataRequest holds the user id of the user to request the data for its
// dashboard.
message GetDashboardDataRequest {
	string user_id = 1;
}

// DashboardData holds the header data, the list of users this user is following,
// the list of users that are following this user. the num of threads saved by
// the user and the user id.
message DashboardData {
	UserHeaderData user_header_data = 1;
	// ids of users that are following this user.
	repeated string followers_ids = 2;
	// ids of users that this user is following.
	repeated string following_ids = 3;
	uint32 threads_saved = 4;
	string user_id = 5;
}

// LoginRequest is a message for requesting the validation of a user's credentials
message LoginRequest {
	string username = 1;
	string password = 150;
}

// LoginResponse holds the id of the user that just logged in
message LoginResponse {
	string user_id = 1;
}

message RegisterUserRequest {
	string email = 1;
	string name = 2;
	string pic_url = 3;
	string id = 4;
	string username = 5;
	string alias = 6;
	string about = 7;
	string password = 150;
}

// RegisterUserResponse holds the id of the user that just signed in
message RegisterUserResponse {
	string user_id = 1;
}

service CrudCheropatilla {
	// Get new feed of either threads in a section or comments in a thread
	rpc RecycleContent(ContentPattern) returns (stream ContentRule) {}
	// Get new feed of threads in general (from multiple sections)
	rpc RecycleGeneral(GeneralPattern) returns (stream ContentRule) {}
	// Get new activity from either multiple users or a single user.
	rpc RecycleActivity(ActivityPattern) returns (stream ContentRule) {}
	// Post upvote on thread, comment or subcomment

	rpc Upvote(UpvoteRequest) returns (stream NotifyUser) {}
	// Post comment on a thread or in a comment
	rpc Comment(CommentRequest) returns (stream NotifyUser) {}
	// Update a thread, comment or subcomment
	rpc UpdateContent(UpdateContentRequest) returns (stream NotifyUser) {}
	// Delete a thread, comment or subcomment
	rpc DeleteContent(DeleteContentRequest) returns (DeleteContentResponse) {}
	// Post a thread to create
	rpc CreateThread(CreateThreadRequest) returns (CreateThreadResponse) {}

	// Get a user's basic data to be displayed in the header navigation section
	rpc GetUserHeaderData(GetBasicUserDataRequest) returns (UserHeaderData) {}
	// Update a user's basic data
	rpc UpdateBasicUserData(UpdateBasicUserDataRequest) returns (UpdateBasicUserDataResponse) {}
	// Get a user's basic data to be dislayed in page
	rpc GetBasicUserData(GetBasicUserDataRequest) returns (BasicUserData) {}
	// Get the list of users followed by a given user
	rpc GetUserFollowingIds(GetBasicUserDataRequest) returns (UserList) {}

	// Get a single thread
	rpc GetThread(GetThreadRequest) returns (GetThreadResponse) {}
	// Get a comment's comments
	rpc GetSubcomments(GetSubcommentsRequest) returns (stream Subcomment) {}

	// Mark unread notifications as read
	rpc MarkAllAsRead(ReadNotifsRequest) returns (ReadNotifsResponse) {}
	// Clear all the notifications
	rpc ClearNotifs(ClearNotifsRequest) returns (ClearNotifsResponse) {}

	// Follow a user
	rpc FollowUser(FollowUserRequest) returns (FollowUserResponse) {}
	// Unfollow a user
	rpc UnfollowUser(UnfollowUserRequest) returns (UnfollowUserResponse) {}

	// Request to save thread
	rpc SaveThread(SaveThreadRequest) returns(SaveThreadResponse) {}
	// Request to remove thread from user's list of saved threads
	rpc UnsaveThread(UnsaveThreadRequest) returns (UnsaveThreadResponse) {}

	// Get either following or followers users' basic data
	rpc ViewUsers(ViewUsersRequest) returns (ViewUsersResponse) {}
	// Get username basic data, following, followers and threads created
	rpc ViewUserByUsername(ViewUserByUsernameRequest) returns (ViewUserResponse) {}
	// Get 
	rpc GetDashboardData(GetDashboardDataRequest) returns (DashboardData) {}

	// Validate user credentials to login
	rpc Login(LoginRequest) returns (LoginResponse) {}
	// Register new user
	rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {}
}